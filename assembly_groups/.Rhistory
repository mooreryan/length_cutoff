dat
scale(dat)
head(dat[-1]) <- 
head(dat[-1])
head(dat[,-1])
head(dat[1:4])
head(dat[1:3])
scale(dat[1:3])
names(fit)
summary(fit)
fit
mydata
fit
fit$centers
head(mydata)
fit$centers
nrow(subset(mydata, fit.cluster==2))
aggregate(mydata, by=fit.cluster)
aggregate(mydata, by=fit.cluster, nrow)
aggregate(mydata, by=mydata$fit.cluster, nrow)
aggregate(mydata, by=list(mydata$fit.cluster))
aggregate(mydata, by=list(mydata$fit.cluster), mean)
fit$centers
nrow(subset(mydata, fit.cluster==3))
nrow(subset(mydata, fit.cluster==3 | fit.cluster==2))
subset(mydata, fit.cluster==3 | fit.cluster==2))
subset(mydata, fit.cluster==3 | fit.cluster==2)
best.clusters <- subset(mydata, fit.cluster==3 | fit.cluster==2)
with(best.clusters, plot(N50 ~ TotalContigs))
mydata
nrow(subset(mydata, five.cluster==3))
nrow(subset(mydata, five.clusters==3))
nrow(subset(mydata, five.clusters==4))
subset(mydata, five.clusters==4)
subset(mydata, five.clusters==4)
subset(mydata, five.clusters==4)[1:3]
subset(mydata, five.clusters==4)[1:4]
sort(subset(mydata, five.clusters==4)[1:4])
sort(subset(mydata, five.clusters==4)[1:4]$TotalContigs)
s
dat$Lengths
dat$Length
names(dat)
s$fitted.values
summary(s)
lm.f$fitted.values
kels <- c(5, 3.6, 4.6, 4.8, 3.8, 3.4, 3.6, 5.2, 5.2, 4.2, 2.6, 3, 3.2, 4)
other <- c(4.6, 3, 2.4, 2.2, 2, 2.6, 2.8, 3.4, 3.4, 1.8, 2.2, 3.6, 2.4, 3.8)
t.test(kels, other)
wilcox.test(kels, other)
kruskal.test(kels, other)
wilcox.test(kels, other, paired=T)
t.test(kels, other, paried=T)
t.test(kels, other, paried=F)
library('vioplot')
vioplot(kels, other)
vioplot(kels, other, col='royalblue2')
vioplot(kels, other, col='gray47')
vioplot(kels, other, col='gray20')
vioplot(kels, other, col='gray100')
vioplot(kels, other, col='gray80')
mean(kels)
sd(kels)
sd(kels)/length(kels)
sd(kels)/sqrt(length(kels))
fun
'fun'
mydata
plot3d
install.packages('plot3d')
install.packages('plot3D')
scatter3D(1,2,3)
library('scatterplot3d')
scatterplot3d(1,2,3)
scatterplot3d(1,2,3)
scatter3D(1,2,3)
scatter3D(1,2,3, phi=20, theta=80)
scatter3D(1,2,3, phi=20)
scatter3D(1,2,3, phi=0)
scatter3D(1,2,3, phi=40)
scatter3D(1,2,3, phi=10)
names(mydata)
?scatter3D
?scatterplot3d
?scatter3D
Hypsometry
par(mfrow = c(2, 2)) image2D(Hypsometry, asp = TRUE, xlab = expression(degree*E),
ylab = expression(degree*N), contour = TRUE)
par(mfrow=c(2,2))
image2D(Hypsometry, asp=T, xlab= expression(degree*E), ylab=expression(degree*N*, contour=T))
image2D(Hypsometry, asp=T, xlab= expression(degree*E), ylab=expression(degree*N), contour=T)
image2D(Hypsometry, asp=T, xlab= expression(degree*E), ylab=expression(degree*N), contour=T)
par(mfrow=c(1,1))
image2D(Hypsometry, asp=T, xlab= expression(degree*E), ylab=expression(degree*N), contour=T)
?expression
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
perspbox(z = volcano, bty = "b", ticktype = "detailed", d = 2,
main = "bty = 􏰀b􏰀")
volcano
perspbox(z = volcano, bty = "f", ticktype = "detailed", d=2,main ="bty=􏰀f􏰀")
perspbox(z = volcano, bty = "b2", ticktype = "detailed",
d=2,main ="bty=􏰀b2􏰀")
perspbox(z = volcano, bty = "g",
d=2,main ="bty=􏰀g􏰀")
par(mfrow=c(1,1))
?plot3D
?scatter3D
6/20
scale(c(1.5, 4.5, 7.5, 10.5))
1.5/4
1.5/3
4.5/3
scale(4)
scale.me(4)
scale.me(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
scale(4)
seq(1.5, 1.5*4, length.out=4)
seq(1.5, by=3, length.out=4)
scale(4)
scale(4)
scale(4)
get.label.coords(4)
get.label.coords(4) / 4
(get.label.coords(4) / 4) + 1
get.label.coords(4)
head(mydata)
?kmeans
names(mydata)
head(mydata$Name)
strsplit(head(mydata$Name), split='-')
lapply(head(mydata$Name), function(s) { strsplit(s, split='-')})
lapply(mydata$Name, function(s) { strsplit(s, split='-')})
mydata$Name
mydata$Name[1]
class(mydata$Name[1])
str(mydata$Name[1])
toString(mydata$Name[1])
lapply(mydata$Name, function(s) { strsplit(toString(s), split='-')})
unlist(lapply(mydata$Name, function(s) { strsplit(toString(s), split='-')}))
head(mydata)
mydata
dat <- read.table('clusters_with_info.txt', header=T, sep=' ')
dat
head(dat)
subset(dat, four.clusters=1)
head(subset(dat, four.clusters=1))
head(subset(dat, four.clusters==1))
subset(dat, four.clusters==1)
subset(dat, four.clusters==1)
subset(dat, four.clusters==2)
subset(dat, four.clusters==2)[,1:6]
subset(dat, four.clusters==2)[,1:6]$GenCo
subset(dat, four.clusters==2)[,1:6]$GenCov
uniq(subset(dat, four.clusters==2)[,1:6]$GenCov)
unique(subset(dat, four.clusters==2)[,1:6]$GenCov)
table(subset(dat, four.clusters==2)[,1:6]$GenCov)
table(subset(dat, four.clusters==2 & GenCov == 50)[,1:6]$GenCov)
table(subset(dat, four.clusters==2 & GenCov == 50)[,1:6]
subset(dat, four.clusters==2 & GenCov == 50)[,1:6]
subset(dat, four.clusters==2 & GenCov == 25)[,1:6]
c2 <- subset(dat, four.clusters==2)[,1:6]
t.test(subset(c2, GenCov == 25), subset(c2, GenCov == 50))
t.test(subset(c2, GenCov == 25)$GenCov, subset(c2, GenCov == 50)$GenCov)
subset(c2, GenCov == 25)$GenCov
t.test(subset(c2, GenCov == 25)$TotalContigs, subset(c2, GenCov == 50)$TotalContigs)
t.test(subset(c2, GenCov == 25)$TotalContigs, subset(c2, GenCov != 25)$TotalContigs)
subset(dat, four.clusters==1)
subset(dat, four.clusters==1 & ReadLen==250 & GenCov == 25)$Kmer
subset(dat, four.clusters==2 & ReadLen==250 & GenCov == 25)$Kmer
sort(subset(dat, four.clusters==2 & ReadLen==250 & GenCov == 25)$Kmer)
sort(subset(dat, four.clusters==3 & ReadLen==250 & GenCov == 25)$Kmer)
sort(subset(dat, four.clusters==4 & ReadLen==250 & GenCov == 25)$Kmer)
